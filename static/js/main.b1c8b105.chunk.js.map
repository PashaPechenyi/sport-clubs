{"version":3,"sources":["components/ClubsCards/default-image.png","components/Footer/logo.svg","components/Header/Header.jsx","components/Cities/Cities.jsx","components/SportCategories/SportCategories.jsx","components/ClubsCards/ClubsCards.jsx","components/Footer/Footer.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","React","memo","className","title","allCities","activeCity","changeActiveCity","TransitionGroup","CSSTransition","key","timeout","classNames","onClick","map","city","allSportCategory","activeSportCategory","changeActiveSportCategory","type","item","clubsForReturn","link","logo","title_short","slice","toLowerCase","require","href","src","alt","App","useState","allClubs","setAllClubs","useEffect","fetch","then","response","json","data","catch","error","setAllCities","citiesSet","Set","forEach","add","setActiveCity","useCallback","clubsOnCity","setClubsOnCity","arrayOfCitiesClubs","filter","club","setAllSportCategory","sportCategorySet","activity","slug","setActiveSportCategory","sportCategory","setClubsForReturn","arrayOfClubs","shouldClubReturn","push","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.b1c8b105.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/default-image.f98b32ce.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.66e9972c.svg\";","import React from \"react\";\r\nimport \"./Header.scss\";\r\n\r\nfunction Header() {\r\n  return (\r\n    <header className=\"mainHeader\">\r\n      <div className=\"container-md\">\r\n        <blockquote className=\"blockquote \">\r\n          <p>Для записи на тренировку теперь достаточно пару касаний!</p>\r\n\r\n          <footer className=\"blockquote-footer\">\r\n            <cite title=\"Source Title\">Instasport</cite>\r\n          </footer>\r\n        </blockquote>\r\n\r\n        <div className=\"jumbotron\">\r\n          <h1>Запись на тренировки онлайн</h1>\r\n          <p>На нашем сайте вы сможете:</p>\r\n          <ul>\r\n            <li>\r\n              <p>\r\n                <small>Узнать расписание тренировок в спортивных клубах</small>\r\n              </p>\r\n            </li>\r\n\r\n            <li>\r\n              <p>\r\n                <small>Записаться на тренировку</small>\r\n              </p>\r\n            </li>\r\n\r\n            <li>\r\n              <p>\r\n                <small>Выбрать абонемент и оплатить его кредитной картой</small>\r\n              </p>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default React.memo(Header);\r\n","import React from \"react\";\r\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\r\nimport \"./Cities.scss\";\r\n\r\nfunction Cities({ allCities, activeCity, changeActiveCity }) {\r\n  return (\r\n    <div className=\"cities\">\r\n      <div className=\"container-md\">\r\n        <ul className=\"nav nav-tabs\">\r\n          <TransitionGroup>\r\n            {activeCity && (\r\n              <CSSTransition\r\n                key=\"activeCity\"\r\n                timeout={300}\r\n                classNames=\"refreshAnimation\"\r\n              >\r\n                <li className=\"nav-item\">\r\n                  <span\r\n                    className=\"nav-link nav-link-refresh\"\r\n                    onClick={() => changeActiveCity(null)}\r\n                  >\r\n                    <span className=\"fa fa-refresh\"></span>\r\n                  </span>\r\n                </li>\r\n              </CSSTransition>\r\n            )}\r\n          </TransitionGroup>\r\n\r\n          {allCities.map((city) => (\r\n            <li key={city} className=\"nav-item\">\r\n              <span\r\n                className={activeCity === city ? \"nav-link active\" : \"nav-link\"}\r\n                onClick={() => changeActiveCity(city)}\r\n              >\r\n                {city}\r\n              </span>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default React.memo(Cities);\r\n","import React from \"react\";\r\nimport \"./SportCategories.scss\";\r\n\r\nfunction SportCategories({\r\n  allSportCategory,\r\n  activeSportCategory,\r\n  changeActiveSportCategory,\r\n}) {\r\n  return (\r\n    <div className=\"sports\">\r\n      <div className=\"container-md\">\r\n        <div className=\"btn-toolbar\">\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn\"\r\n            onClick={() => {\r\n              changeActiveSportCategory(null);\r\n            }}\r\n          >\r\n            <span className=\"fa fa-refresh\"></span>\r\n          </button>\r\n\r\n          {allSportCategory.map((item) => (\r\n            <button\r\n              key={item}\r\n              type=\"button\"\r\n              className={\r\n                activeSportCategory === item ? \"btn activeSportCategory\" : \"btn\"\r\n              }\r\n              onClick={() => {\r\n                changeActiveSportCategory(item);\r\n              }}\r\n            >\r\n              {item}\r\n            </button>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default React.memo(SportCategories);\r\n","import React from \"react\";\r\nimport \"./ClubsCards.scss\";\r\n\r\nfunction ClubsCards({ clubsForReturn }) {\r\n  return (\r\n    <div className=\"clubsCardsBlock\">\r\n      <div className=\"container-md\">\r\n        <div className=\"row\">\r\n          {clubsForReturn.map(({ link, logo, title_short, title }) => {\r\n            if (\r\n              logo.slice(-3).toLowerCase() !== \"png\" &&\r\n              logo.slice(-3).toLowerCase() !== \"jpg\"\r\n            ) {\r\n              logo = require(\"./default-image.png\");\r\n            }\r\n\r\n            return (\r\n              <div className=\"col-3\" key={title}>\r\n                <a href={link}>\r\n                  <img src={logo} alt=\"clubs logo\" className=\"card-img-top\" />\r\n                </a>\r\n\r\n                <p className=\"clubsName\">{title_short}</p>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default React.memo(ClubsCards);\r\n","import React from \"react\";\r\nimport \"./Footer.scss\";\r\n\r\nfunction Footer() {\r\n  return (\r\n    <footer className=\"mainFooter\">\r\n      <div className=\"container-md\">\r\n        <hr />\r\n        <div className=\"mainFooterWrapper\">\r\n          <img src={require(\"./logo.svg\")} alt=\"Logo\" />\r\n          <a href=\"https://instasport.co/\">Instasport – спортхаб онлайн!</a>\r\n        </div>\r\n      </div>\r\n    </footer>\r\n  );\r\n}\r\n\r\nexport default React.memo(Footer);\r\n","import React, { useEffect, useState, useCallback } from \"react\";\n\nimport Header from \"./components/Header/Header\";\nimport Cities from \"./components/Cities/Cities\";\nimport SportCategories from \"./components/SportCategories/SportCategories\";\nimport ClubsCards from \"./components/ClubsCards/ClubsCards\";\nimport Footer from \"./components/Footer/Footer\";\n\nfunction App() {\n  // Все клубы во всех городах\n  const [allClubs, setAllClubs] = useState([]);\n  useEffect(() => {\n    fetch(\"https://instasport.co/dashboard/api/v1/clubs/\")\n      .then((response) => response.json())\n      .then((data) => {\n        setAllClubs(data);\n      })\n      .catch((error) => error);\n  }, []);\n\n  // Все города в которых находятся клубы\n  const [allCities, setAllCities] = useState([]);\n  useEffect(() => {\n    let citiesSet = new Set();\n    allClubs.forEach((item) => {\n      citiesSet.add(item.city.title);\n    });\n    setAllCities([...citiesSet]);\n  }, [allClubs]);\n\n  // Выбраный город при клике или null (если город не выбран)\n  const [activeCity, setActiveCity] = useState(null);\n  const changeActiveCity = useCallback((city) => {\n    setActiveCity(city);\n    changeActiveSportCategory(null);\n  }, []);\n\n  // Все доступные клубы в выбраном городе\n  // (если город не выбран то все клубы во всех городах)\n  const [clubsOnCity, setClubsOnCity] = useState([]);\n  useEffect(() => {\n    if (!activeCity) {\n      setClubsOnCity(allClubs);\n      return;\n    }\n\n    const arrayOfCitiesClubs = allClubs.filter(\n      (club) => club.city.title === activeCity\n    );\n\n    setClubsOnCity(arrayOfCitiesClubs);\n  }, [allClubs, activeCity]);\n\n  // Все спортивные направления в клубах clubsOnCity (с учетом выбранного города)\n  const [allSportCategory, setAllSportCategory] = useState([]);\n  useEffect(() => {\n    let sportCategorySet = new Set();\n    clubsOnCity.forEach((item) => {\n      item.activity.forEach(({ slug }) => {\n        sportCategorySet.add(slug);\n      });\n    });\n    setAllSportCategory([...sportCategorySet]);\n  }, [clubsOnCity]);\n\n  // Выбранное спортивное направление или null (если оно не выбрано)\n  const [activeSportCategory, setActiveSportCategory] = useState(null);\n  const changeActiveSportCategory = useCallback((sportCategory) => {\n    setActiveSportCategory(sportCategory);\n  }, []);\n\n  // Все клубы с учетом выбранного спортивного направления\n  // и города(по городу уже отфильтрованы клубы в clubsOnCity)\n  const [clubsForReturn, setClubsForReturn] = useState([]);\n  useEffect(() => {\n    if (!activeSportCategory) {\n      setClubsForReturn(clubsOnCity);\n      return;\n    }\n\n    let arrayOfClubs = [];\n\n    clubsOnCity.forEach((item) => {\n      let shouldClubReturn = false;\n      for (let sportCategory of item.activity) {\n        if (activeSportCategory === sportCategory.slug) {\n          shouldClubReturn = true;\n        }\n      }\n\n      if (shouldClubReturn) arrayOfClubs.push(item);\n    });\n\n    setClubsForReturn(arrayOfClubs);\n  }, [activeSportCategory, clubsOnCity]);\n\n  return (\n    <div>\n      <Header />\n      <Cities\n        allCities={allCities}\n        activeCity={activeCity}\n        changeActiveCity={changeActiveCity}\n      />\n      <SportCategories\n        changeActiveSportCategory={changeActiveSportCategory}\n        activeSportCategory={activeSportCategory}\n        allSportCategory={allSportCategory}\n      />\n      <ClubsCards clubsForReturn={clubsForReturn} />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\n\nimport App from \"./App.jsx\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}